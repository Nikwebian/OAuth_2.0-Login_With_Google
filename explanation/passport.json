passport.serializeUser((user, done) => {
    done(null, user.id); 
});

Here :
user ‚Üí is the user object returned after login (Google, DB, etc.).
user.id ‚Üí is what gets saved inside the session cookie.

üìå 1. passport.serializeUser
This is a Passport-provided hook (function).
When you log a user in, Passport calls this function to ask:
üëâ ‚ÄúHey developer, what piece of the user object should I save inside the session cookie?‚Äù
You implement it by passing a callback (user, done).
üìå 2. (user, done) parameters
user ‚Üí This is the full user object (from DB or Google, depending on login strategy).
Example:
{
   _id: "65ab123...",
   name: "Nikhil",
   email: "nikhil@example.com"
}

done ‚Üí This is a callback function provided by assport.
You must call done(error, dataToStoreInSession).
üìå 3. Why done(null, user.id)?
done takes 2 arguments:
error ‚Üí if something goes wrong, pass an error object here. If no error ‚Üí pass null.
That‚Äôs why you see null. It means ‚Äúno error happened.‚Äù
user.id ‚Üí this is the unique identifier Passport should store in the session cookie.
We don‚Äôt store the whole user.
Just the ID (small, secure, easy to fetch later).
So, this line:
done(null, user.id);
means:
‚úÖ No error (null).
‚úÖ Save only the user.id in the session cookie.
üìå 4. Why not done(error, somethingElse)?
If login fails or you hit DB issues, you might call:
done(new Error("DB not reachable"), null);

‚Üí Passport will stop and handle the error.
If successful, we just pass null (no error) and the thing we want to save (usually user.id).
üìå 5. Why the name done?
It‚Äôs just a convention from Passport.
Think of it like next in Express middleware.
You could imagine it as callback, but Passport internally expects the second parameter to be called, so it‚Äôs always named done.
‚úÖ So the magic of:
passport.serializeUser((user, done) => {
    done(null, user.id);
});

is:
Passport says: ‚ÄúTell me what to store in the cookie.‚Äù
You answer: ‚ÄúStore only the user.id.‚Äù
You tell Passport there‚Äôs no error by passing null first.



2. 2Ô∏è‚É£ Now: deserializeUser
üü¢ 3. Deserialize
üëâ ‚ÄúHow do we get the full user back from the cookie data?‚Äù
When the user makes a request, Passport reads the session cookie.
The cookie only has the user.id.
Every time the user makes a request, Passport needs the full user object again (not just the id).
This is where deserializeUser comes in:

passport.deserializeUser((id,done)=>{ 
     // Look up the user in the DB by their id
    User.findById(id).
    then(user=>done(null,user)).
    catch(err=>done(err,null)); 
}); 
OR 
passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findById(id); // ye vo id he jo session se aarahi he ok. 
        done(null, user);
    } catch (err) {
        done(err, null);
    }
});


3Ô∏è‚É£ Step by Step Flow: 
First Login
User logs in with Google or Local Strategy.
Passport gets the user object.
serializeUser runs ‚Üí saves only user.id in session
Cookie with session ID is sent to browser.
************************************************************************************
This fetches the full user object from the DB and attaches it to req.user.
Now in your route handlers, you can access req.user.name, req.user.email, etc.
************************************************************************************


--------------------NOW WE UNDERSTAND THE PASSPORT--------------------
1Ô∏è‚É£ app.use(passport.initialize())
This initializes Passport for your Express app.
It sets up the middleware needed to handle authentication.
Think of it as telling Express
‚ÄúHey, we are going to use Passport to handle login and authentication in this app, so prepare it.‚Äù
What it does internally:
Adds methods like req.login(), req.logout(), and req.isAuthenticated() to the request object.
Prepares Passport to work with strategies (Google, local, etc.).
If you don‚Äôt call this, Passport won‚Äôt work at all, even if you define strategies.


2Ô∏è‚É£ app.use(passport.session());
This is required if you want session-based authentication (keeping the user logged in).
It works together with express-session.
What it does:
Reads the session cookie (connect.sid) from the incoming request.
Finds the session object in your session store (Mongo, memory, Redis, etc.).
Calls deserializeUser with the ID stored in the session.
Attaches the full user object to req.user.


Passport uses strategies to handle different types of authentication.
GoogleStrategy is for OAuth 2.0 login via Google.
You configure it with your app‚Äôs client ID, client secret, and callback URL.
Passport will handle redirecting the user to Google and receiving the authentication response.

passport.use(
new GoogleStrategy({
    clientId:[], 
    clientSecret:[], 
    callbackURL: 'http://localhost:3000/auth/google/callback',    
},

))


3Ô∏è‚É£ Breaking it down
üîπ passport.use(...)
Registers a new authentication strategy with Passport.

In this case, it‚Äôs Google OAuth 2.0.
new GoogleStrategy({ ... }, callback)
First argument = configuration object
Second argument = verify callback function
üîπ Configuration Object
Property	Explanation
clientID	Your Google OAuth Client ID (from Google Cloud Console).
clientSecret	Your Google OAuth Client Secret (from Google Cloud Console).
callbackURL	The route in your app where Google redirects after login.: http://localhost:3000/auth/google/callback'
Google will redirect the user here with an authorization code.
This URL must also be registered in Google Cloud for security.
Verify Callback (accessToken, refreshToken, profile, done)
This function is called after Google successfully authenticates the user.
Parameter	                                        Explanation
accessToken	                    Token you can use to call Google APIs on behalf of the user.
refreshToken	                Token to get a new access token once the first expires (optional).
profile	User‚Äôs                  Google profile info (name, email, Google ID, etc.).
done	                        Passport callback ‚Äî signals that authentication is complete.

Inside this callback, you typically:
Check if the user exists in your database.
If not, create a new user.
Call done(null, user) ‚Üí Passport then serializes the user into the session.
return done(null, profile);

// Now Applying the Routes 

{ scope: ['profile', 'email'] }

scope tells Google what information your app wants to access.

Examples:

'profile' ‚Üí Basic profile info (name, photo).

'email' ‚Üí User‚Äôs email address.

'openid' ‚Üí Google ID (unique identifier).

